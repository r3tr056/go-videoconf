name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_SIGNALLING: ${{ github.repository }}/signalling-server
  IMAGE_NAME_USERS: ${{ github.repository }}/users-service
  IMAGE_NAME_CLIENT: ${{ github.repository }}/client

jobs:
  # Test Go services
  test-go-services:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [signalling-server, users-service]
    
    services:
      mongodb:
        image: mongo:5.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.adminCommand(\"ismaster\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      working-directory: ./server/${{ matrix.service }}
      run: go mod download
    
    - name: Run unit tests
      working-directory: ./server/${{ matrix.service }}
      run: go test -v -race -coverprofile=coverage.out ./...
      env:
        MONGODB_URI: mongodb://root:password@localhost:27017/test?authSource=admin
    
    - name: Run comprehensive tests
      working-directory: ./server/${{ matrix.service }}
      run: go test -v -race -coverprofile=coverage_comprehensive.out ./tests/...
      env:
        MONGODB_URI: mongodb://root:password@localhost:27017/test?authSource=admin
    
    - name: Generate coverage report
      working-directory: ./server/${{ matrix.service }}
      run: go tool cover -html=coverage.out -o coverage.html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./server/${{ matrix.service }}/coverage.out
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage
        fail_ci_if_error: true

  # Stress tests for Go services
  stress-test-go-services:
    runs-on: ubuntu-latest
    needs: test-go-services
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    services:
      mongodb:
        image: mongo:5.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
    
    - name: Run stress tests
      working-directory: ./server/signalling-server
      run: go test -v -run="^TestStress" -timeout=10m ./tests/...
      env:
        MONGODB_URI: mongodb://root:password@localhost:27017/test?authSource=admin
    
    - name: Run load tests
      working-directory: ./server/users-service
      run: go test -v -run="^TestLoad" -timeout=10m ./tests/...
      env:
        MONGODB_URI: mongodb://root:password@localhost:27017/test?authSource=admin

  # Test TypeScript SDK
  test-sdk:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: sdk/package-lock.json
    
    - name: Install SDK dependencies
      working-directory: ./sdk
      run: npm ci
    
    - name: Run TypeScript type checking
      working-directory: ./sdk
      run: npm run type-check
    
    - name: Run linting
      working-directory: ./sdk
      run: npm run lint
    
    - name: Run unit tests
      working-directory: ./sdk
      run: npm run test:coverage
    
    - name: Build SDK
      working-directory: ./sdk
      run: npm run build
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./sdk/coverage/lcov.info
        flags: sdk
        name: sdk-coverage
        fail_ci_if_error: true

  # Test React Client
  test-client:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: Install client dependencies
      working-directory: ./client
      run: npm ci
    
    - name: Run client tests
      working-directory: ./client
      run: npm test -- --coverage --watchAll=false
    
    - name: Build client
      working-directory: ./client
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: client-build
        path: client/build/

  # Integration tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-go-services, test-sdk]
    
    services:
      mongodb:
        image: mongo:5.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Start services with Docker Compose
      run: |
        docker-compose up -d
        sleep 30  # Wait for services to start
    
    - name: Wait for services to be healthy
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:8081/health; do sleep 2; done'
    
    - name: Run integration tests
      run: go test -v -timeout=5m ./tests/integration/...
      env:
        SIGNALLING_SERVER_URL: http://localhost:8080
        USERS_SERVICE_URL: http://localhost:8081
    
    - name: Collect Docker logs
      if: failure()
      run: |
        docker-compose logs > docker-logs.txt
    
    - name: Upload Docker logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: docker-logs
        path: docker-logs.txt
    
    - name: Stop services
      if: always()
      run: docker-compose down

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: go, javascript

  # Build and push Docker images
  build-and-push-images:
    runs-on: ubuntu-latest
    needs: [test-go-services, test-sdk, test-client, integration-tests]
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: 
          - name: signalling-server
            context: ./server/signalling-server
            image: signalling-server
          - name: users-service
            context: ./server/users-service
            image: users-service
          - name: client
            context: ./client
            image: client
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service.image }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service.context }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Release management
  release:
    runs-on: ubuntu-latest
    needs: [build-and-push-images, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        registry-url: 'https://npm.pkg.github.com'
    
    - name: Get version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Build SDK for release
      working-directory: ./sdk
      run: |
        npm ci
        npm run build
        npm run docs
    
    - name: Publish SDK to GitHub Packages
      working-directory: ./sdk
      run: |
        npm version ${{ steps.version.outputs.VERSION }} --no-git-tag-version
        npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          ## Changes in this Release
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Docker Images
          - `ghcr.io/${{ github.repository }}/signalling-server:${{ steps.version.outputs.VERSION }}`
          - `ghcr.io/${{ github.repository }}/users-service:${{ steps.version.outputs.VERSION }}`
          - `ghcr.io/${{ github.repository }}/client:${{ steps.version.outputs.VERSION }}`
          
          ## SDK Package
          - `@videoconf/sdk@${{ steps.version.outputs.VERSION }}`
        draft: false
        prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push-images
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # This could include kubectl commands, AWS CLI, etc.
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test commands here

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
    
    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Add health check commands here